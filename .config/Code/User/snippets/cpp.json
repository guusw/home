{
/*
	// Place your snippets for C++ here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"Inclusion guard" :
	{
		"prefix":"incg",
		"body": [
			"#ifndef $1",
			"#define $1",
			"$0",
			"#endif // $1"

		]
	},
	"Null check" :
	{
		"prefix":"isn",
		"body": [
			"if($1 == nullptr)",
			"    $0"
		]
	},
	"Class": 
	{
		"prefix": "class",
		"body": [
			"class $1",
			"{",
			"public:",
			"    $0",
			"};"
		]
	},
	"Namespace": 
	{
		"prefix": "ns",
		"body": [
			"namespace $1",
			"{",
			"    $0",
			"};"
		]
	},
	"Foreach": 
	{
		"prefix": "foreach",
		"body": [
			"for(auto& $1 : $2)",
			"{",
			"    $0",
			"}"
		],
		"description": ""
	},
	"For iterator loop": 
	{
		"prefix": "fori",
		"body": [
			"for(auto it = $1.begin(); it != $1.end(); it++)",
			"{",
			"    $0",
			"}"
		],
		"description": ""
	},
	"Impl pattern implementation": {
		"prefix": "iimpl",
		"body": [
			"class $1_Impl",
			"{",
			"public:",
			"};",
			"",
			"$1::$1()",
			"{",
			"	m_impl = new $1_Impl();",
			"}",
			"$1::~$1()",
			"{",
			"	delete m_impl;",
			"}"
		]
	},
	"Impl pattern definition": {
		"prefix": "classimpl",
		"body": [
			"class $1",
			"{",
			"public:",
			"    $1();",
			"    ~$1();",
			"    $0",
			"private:",
			"    class $1_Impl* m_impl;",
			"};"
		]
	},
	"For loop (size_t)": {
		"prefix": "fors",
		"body": [
			"for(size_t $1 = 0; $1 < $2; ++$1)",
			"{",
			"    $0",
			"}"
		]
	},
	"For loop (auto)": {
		"prefix": "fora",
		"body": [
			"for(size_t $1 = 0; $1 < $2; ++$1)",
			"{",
			"    $0",
			"}"
		]
	}
}