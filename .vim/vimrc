"
" My vimrc file :>
"
set encoding=utf-8
set nocompatible              " be iMproved, required
filetype off                  " required

" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'Valloric/YouCompleteMe'
Plug 'vim-scripts/Conque-GDB'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-dispatch'
Plug 'SirVer/ultisnips'
Plug 'PotatoesMaster/i3-vim-syntax'
"Plug 'baabelfish/nvim-nim'
"Plug 'BitR/ycm-nimsuggest', { 'dir': '~/.vim/plugged/YouCompleteMe/third_party/ycmd/ycmd/completers/nim' }
Plug 'xuhdev/vim-latex-live-preview'
Plug 'vim-scripts/tir_black'
Plug 'thinca/vim-localrc'

call plug#end()

colorscheme peachpuff

set path+=**
set encoding=utf-8
scriptencoding utf-8

" Load powerline bindings
set rtp+=$powerline_path/bindings/vim

" Always show statusline
set laststatus=2

" Use 256 colours (Use this setting only if your terminal supports 256 colours)
set t_Co=256

set listchars=tab:⟶\ 
" Optional space list character
"space:·
set list

set number
set relativenumber
set nowrap

set ts=4 sw=4 et

if has("vms")
    set nobackup      " do not keep a backup file, use versions instead
else
    set backup        " keep a backup file (restore to previous version)
    if has("persistent_undo")
        set undofile    " keep an undo file (undo changes after closing)
    endif
endif
set undodir=~/.vim/.undo//
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swp//

" Only do this part when compiled with support for autocommands.
if has("autocmd")
    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
    au!

    " Automatically apply key mappings
    autocmd VimEnter xmodmap ~/.Xmodmap

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78

    " Default settings for tab as 4 spaces
    set expandtab shiftwidth=4 tabstop=4

    " Setting for python files using tabs with 8 spaces
    autocmd Filetype python setlocal noexpandtab sw=4 ts=4 sts=4

    " Setting for nim files
    autocmd Filetype nim setlocal expandtab sw=2 ts=2 sts=2
    autocmd Filetype nims setlocal expandtab sw=2 ts=2 sts=2

    " Keep clipboard after closing vim
    autocmd VimLeave * call system("xsel -ib", getreg('+'))

    " Markdown
    autocmd FileType markdown nnoremap <F5> :w<CR>:!pandoc % -o %:r.pdf<CR><CR>
    autocmd FileType markdown set wrap

    augroup END
else
    set autoindent        " always set autoindenting on
endif " has("autocmd")

" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
if has('syntax') && has('eval')
    packadd matchit
endif

" Alt key fix for gnome terminal
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw
set timeout ttimeoutlen=50

" Line movement (alt+up/down)
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" Snippet hotkeys
"let g:UltiSnipsExpandTrigger="<space>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:ycm_confirm_extra_conf = 0
let g:livepreview_previewer ='evince'

" Local vimrc filename
let g:localrc_filename = '.vimrc'
